<?php

/**
 * @file
 * RESTful OAuth2 Authentication module.
 */

/**
 * Implements hook_init().
 *
 * Performs a user login from the User ID of the Authentication Token.
 */
function restws_oauth2_server_init() {
  if (!$server = variable_get('restws_oauth2_server_name', FALSE)) {
    return NULL;
  }

  $server_name = variable_get('restws_oauth2_server_name', FALSE);
  $scope_name = variable_get('restws_oauth2_server_scope', 'restws_oauth2_server_scope');

  // Only check for tokens if the user is not authenticated.
  if (user_is_anonymous()) {

    // Check if an OAuth2 request was made.
    $result = oauth2_server_check_access($server_name, $scope_name);

    // Check if a Token was returned, or an error Response.
    if ($result instanceof \OAuth2\Response) {
      $status_code = $result->getStatusCode();
      switch ($status_code) {

        // Send 401 errors that indicate an insufficient scope
        case 401:
          //oauth2_server_send_response($result);
          break;

        // Don't send the error for 403 errors. This will break pages
        // when an anonymous user really is making requests
        // Including the /oauth2/authorize login form endpoint.
        case 403:
          break;
      }
    }
    elseif (is_array($result) && !empty($result['user_id'])) {

      // Reset the global user.
      global $user;
      $user = user_load($result['user_id']);

      // Finish "logging" in the User connected with the Token.
      $login_array = array('name' => $user->name);
      user_login_finalize($login_array);
      drupal_set_message($user->name . ' logged in via Token.', 'message');

      // Reset the page so the user if fully authenticated.
      if (!user_is_anonymous()) {
        drupal_static_reset();

        // Always make sure to disable the page cache after we authenticated the
        // user so that a response never gets into the page cache.
        drupal_page_is_cacheable(FALSE);

        // Redetermine the page callback for restws calls like node/1.json
        // and user/1.json.
        _restws_determine_router_item();
      }

      // Or, clear the login form error and remove the login failure message.
      else {
        $form = &drupal_static('form_set_error', array());
        $form = array();
        drupal_get_messages();
      }
    }
  }
}

/**

/**
 * Implements hook_restws_request_alter().
 */
function restws_oauth2_server_restws_request_alter(array &$request) {

  // Disable page caching for security reasons so that an authenticated user
  // response never gets into the page cache for anonymous users.
  // This is necessary because the page cache system only looks at session
  // cookies, but not at OAuth2 Authentication.
  drupal_page_is_cacheable(FALSE);
}

/**
 * Implements hook_menu().
 */
function restws_oauth2_server_menu(){
  $items = array();
  $items['admin/config/system/restws_oauth2_server'] = [
    'title'            => 'restws OAuth2 Server',
    'description'      => 'Configure OAuth2 authentication server for restws.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('restws_oauth2_server_config_form'),
    'access arguments' => ['Administer OAuth2 Server'],
    'type' => MENU_NORMAL_ITEM,
  ];
  return $items;
}

/**
 * Admin page to configure the OAuth2 server for use with restws.
 */
function restws_oauth2_server_config_form($form, &$form_state){
  $server_name = variable_get('restws_oauth2_server_name', 'server_name');
  $scope_name = variable_get('restws_oauth2_server_scope', 'restws_oauth2_server_scope');

  $form['restws_oauth2_server_name'] = array(
    '#type' => 'textfield',
    '#title' => t('OAuth2 Server Name'),
    '#description' => t('Machine Name of the OAuth2 Server to configure with restws.
      This will be saved under the global variable \'restws_oauth2_server_name\'.'),
    '#default_value' => $server_name,
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['restws_oauth2_server_scope'] = array(
    '#type' => 'textfield',
    '#title' => t('OAuth2 restws Scope'),
    '#description' => t('OAuth2 scope for restws access. \'restws_oauth2_server_scope\' by default.
      This will be saved under the global variable \'restws_oauth2_server_scope\'.'),
    '#default_value' => $scope_name,
    '#size' => 60,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
