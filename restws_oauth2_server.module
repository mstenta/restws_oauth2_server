<?php

/**
 * @file
 * RESTful OAuth2 Authentication module.
 */

/**
 * Implements hook_init().
 *
 * Performs a user login from the User ID of the Authentication Token.
 */
function restws_oauth2_server_init() {
  if (!$server = variable_get('oauth2_server_restful_server')) {
    drupal_set_message("Set the server name!!", 'error');
    return NULL;
  }

  $server_name = variable_get('oauth2_server_restful_server');

  # Only check for tokens if the user is not authenticated.
  if (user_is_anonymous()) {
    # Check if an OAuth2 request was made.
    $result = oauth2_server_check_access('farm_oauth', 'oauth2_server_restful_scope');

    # Check if a Token was returned, or an error Response.
    if ($result instanceof \OAuth2\Response) {
      $status_code = $result->getStatusCode();
      switch ($status_code) {
        case 401:
          # Send 401 errors that indicate an insufficient scope
          //oauth2_server_send_response($result);
        case 403:
          # Don't send the error for 403 errors. This will break pages
          # when an anonymous user really is making requests
          # Including the /oauth2/authorize login form endpoint.
      }
    }
    elseif (is_array($result) && !empty($result['user_id'])) {
      # Reset the global user
      global $user;
      $user = user_load($result['user_id']);

      # Finish "logging" in the User connected with the Token
      $login_array = array('name' => $user->name);
      user_login_finalize($login_array);
      drupal_set_message($user->name . ' logged in via Token.', 'message');

      # Reset the page so the user if fully authenticated.
      if (!user_is_anonymous()) {
        drupal_static_reset();

        // Always make sure to disable the page cache after we authenticated the
        // user so that a response never gets into the page cache.
        drupal_page_is_cacheable(FALSE);

        // Redetermine the page callback for restws calls like node/1.json
        // and user/1.json.
        _restws_determine_router_item();
      }
      else {
        // Clear the login form error and remove the login failure message.
        $form = &drupal_static('form_set_error', array());
        $form = array();
        drupal_get_messages();
      }

    }
  }
}

/**

/**
 * Implements hook_restws_request_alter().
 */
function restws_oauth2_server_restws_request_alter(array &$request) {
  // Disable page caching for security reasons so that an authenticated user
  // response never gets into the page cache for anonymous users.
  // This is necessary because the page cache system only looks at session
  // cookies, but not at OAuth2 Authentication.
  drupal_page_is_cacheable(FALSE);
}
